#!/bin/sh
#
# On Windows, use an embeddable Python release from python.org.
# On Unixes, use the system's Python inside a virtualenv.
# Installs requirements from requirements.txt when changed.
# TODO: Add a requirements.freeze.txt lockfile.
#
# A warning about Python versions:
# - Not all versions get embedded .zip releases; check https://www.python.org/ftp/python/.
# - Python doesn't offer Linux binaries, so the distribution must be relied upon. This means the version number should be upgraded slowly.
# - Ubuntu 18.04 LTS "Bionic" only has 3.6. Its life ends in April 2023, after which Ubuntu 20.04 LTS "Focal" has 3.8.
# - MacOS Catalina 10.15.7 has 3.8.2.
#
set -eu

Bootstrap=$(dirname "$0")
. "$Bootstrap/_common.sh"

# Convenience variables
Sdk="$(dirname "$Bootstrap")"

if test "$OS" != "Windows"; then
	# Try to find a Python executable.
	if command -v python3 >/dev/null 2>&1; then
		PythonExe=python3
	elif command -v python >/dev/null 2>&1; then
		PythonExe=python
	elif command -v py >/dev/null 2>&1; then
		PythonExe="py -3"
	else
		echo >&2
		if command -v apt-get >/dev/null 2>&1; then
			echo "Please install Python using your system's package manager:" >&2
			echo "    sudo apt-get install python3 python3-pip" >&2
		elif command -v pacman >/dev/null 2>&1; then
			echo "Please install Python using your system's package manager:" >&2
			echo "    sudo pacman -S python python-pip" >&2
		else
			echo "Please install Python from https://www.python.org/downloads/ or using your system's package manager." >&2
		fi
		echo >&2
		exit 1
	fi

	# Create a venv and activate it
	PythonDir="$Cache/python-venv-$PYTHON_VERSION"
	if ! test -d "$PythonDir"; then
		python_venv() {
			TmpPythonDir=$(temp_directory)
			"$PythonExe" -m venv "$TmpPythonDir"
			mv "$TmpPythonDir" "$PythonDir"
		}
		one_at_a_time python_venv
	fi
	PythonExe="$PythonDir/bin/python"
else
	# Windows bootstrap.

	# Strip the "App Execution Aliases" from $PATH. Even if the user installed
	# Python using the Windows Store on purpose, these aliases always generate
	# "Permission denied" errors when sh.exe tries to invoke them.
	PATH=$(echo "$PATH" | tr ":" "\n" | grep -v "AppData/Local/Microsoft/WindowsApps" | tr "\n" ":")

	PythonArch="amd64"
	PythonDir="$Cache/python-$PYTHON_VERSION-embed-$PythonArch"
	PythonExe="$PythonDir/python.exe"

	# Download and unzip a portable version of Python
	if ! test -d "$PythonDir"; then
		python_unzip() {
			TmpPythonDir=$(temp_unzip "$(temp_download_and_verify PYTHON_VERSION Windows)")
			# Copy a ._pth file without "import site" commented, so pip will work.
			cp "$Bootstrap/python36._pth" -t "$TmpPythonDir"
			# Install pip.
			GetPip=$(temp_file)
			download_file "https://bootstrap.pypa.io/pip/3.6/get-pip.py" "$GetPip"
			"$TmpPythonDir/python.exe" "$GetPip" --no-warn-script-location
			# Commit the extracted Python directory.
			mv "$TmpPythonDir" "$PythonDir"
		}
		one_at_a_time python_unzip
	fi
fi

# Verify version and query the path separator
PathSep=$("$PythonExe" - "$PYTHON_VERSION" <<'EOF'
import sys, os
wanted = [int(x) for x in sys.argv[1].split('.')]
if sys.version_info.major != wanted[0] or sys.version_info.minor < wanted[1]:
	print("Error: Python ", sys.argv[1], ".", sys.argv[2], " or later is required, but you have:\n", sys.version, sep="", file=sys.stderr)
	exit(1)
print(os.pathsep)
EOF
)

# Use pip to install our requirements
Requirements="requirements.txt"
if ! test -f "$PythonDir/$Requirements" || test "$(sha256sum < "$Sdk/$Requirements")" != "$(sha256sum < "$PythonDir/$Requirements")"; then
	python_pip() {
		"$PythonExe" -m pip install -U wheel >&2
		"$PythonExe" -m pip install -U pip >&2
		"$PythonExe" -m pip install -r "$Sdk/$Requirements" >&2
		cp "$Sdk/$Requirements" "$PythonDir/$Requirements"
		echo "---" >&2
	}
	one_at_a_time python_pip
fi

# Invoke python with all command-line arguments
export PYTHONPATH="$Sdk$PathSep${PYTHONPATH:-}"
exec "$PythonExe" -u "$@"
