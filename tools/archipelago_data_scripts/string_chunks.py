genericHeader = "#autogenerated from Hamsandwich/tools/archipelago_data_scripts"

pyItemHeader = """from typing import Dict

from BaseClasses import ItemClassification as IC
from worlds.loonyland import loonyland_base_id as ll_base_id
from worlds.loonyland.Defines import *
from worlds.loonyland.Items import LL_Item, LL_ItemCat

loony_item_table: Dict[str, LL_Item] = {"""

pyRegionHeader = """from typing import Dict
from worlds.loonyland.Regions import LLRegion

loonyland_region_table: Dict[str, LLRegion] = {"""

pyLocationHeader = """from typing import Dict
from worlds.loonyland.Locations import LL_Location, LL_LocCat

loonyland_location_table: Dict[str, LL_Location] = {"""

pyRulesHeader = """from typing import Dict
from worlds.generic.Rules import CollectionRule
from worlds.loonyland.Rules import *
def set_rules(multiworld, world, player):"""

pyRulesFooter = """    for loc in multiworld.get_locations(player):
        if loc.name in access_rules:
            add_rule(loc, access_rules[loc.name])"""

pyEntranceHeader = """from typing import List
from worlds.loonyland.Entrances import LL_Entrance
from worlds.loonyland.Rules import have_light_source
def set_entrances(multiworld, world, player):
    loonyland_entrance_table: List[LL_Entrance] = ["""

pyEntranceFooter = """    for region in multiworld.get_regions(player):
        for entry in loonyland_entrance_table:
            if entry.source_region == region.name:
                region.connect(connecting_region=world.get_region(entry.target_region), rule=entry.rule)"""