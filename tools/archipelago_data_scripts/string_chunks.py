genericHeader = "autogenerated from Hamsandwich/tools/archipelago_data_scripts\n"

pyMainHeader = """from typing import Dict, List
from BaseClasses import ItemClassification as IC
from worlds.generic.Rules import CollectionRule, add_rule
from worlds.loonyland import loonyland_base_id as ll_base_id, LL_Location
from worlds.loonyland.Entrances import LL_Entrance
from worlds.loonyland.Items import LL_Item, LL_ItemCat
from worlds.loonyland.Locations import LL_LocCat
from worlds.loonyland.Regions import LLRegion
from worlds.loonyland.Rules import *

"""

pyItemHeader = """loony_item_table: Dict[str, LL_Item] = {"""

pyRegionHeader = """loonyland_region_table: Dict[str, LLRegion] = {"""


pyLocationHeader = """loonyland_location_table: Dict[str, LL_Location] = {"""

pyRulesHeader = """def set_rules(multiworld, world, player):
    access_rules: Dict[str, CollectionRule] = {"""

pyRulesFooter = """    for loc in multiworld.get_locations(player):
        if loc.name in access_rules:
            add_rule(loc, access_rules[loc.name])"""

pyEntranceHeader = """def set_entrance_rules(multiworld, world, player):
    loonyland_entrance_table: List[LL_Entrance] = ["""

pyEntranceFooter = """    for region in multiworld.get_regions(player):
        for entry in loonyland_entrance_table:
            if entry.source_region == region.name:
                region.connect(connecting_region=world.get_region(entry.target_region), rule=entry.rule)"""

luaEntranceHeader = """function ent_valid(entry)
        if not entry.rule then
                entry.rule = function(state) return true end
        end
        return entry
end
"""